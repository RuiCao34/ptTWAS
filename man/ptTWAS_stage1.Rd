% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stage1.R
\name{ptTWAS_stage1}
\alias{ptTWAS_stage1}
\title{Stage 1: Build Gene Imputation Model in pt-TWAS}
\usage{
ptTWAS_stage1(Y, G, U, id, t_vec, weights)
}
\arguments{
\item{Y}{A numeric vector of cell-level gene expression values, which can be log transformation of aggregated cell read counts.}

\item{G}{A numeric matrix of genotypes, with individuals in rows and SNPs
in columns. Row names are the subject IDs.}

\item{U}{A numeric matrix of covariates to be adjusted for in the model,
with individuals in rows and covariates in columns. Row names are the subject IDs.}

\item{id}{A cell-level vector of individual identifiers. The IDs should match those from input \code{G} and \code{U}.}

\item{t_vec}{A numeric vector representing the cell-level pseudotime values
(scaled to be within [0, 1]).}

\item{weights}{A vector of cell-level weights, typically
as the cell numbers per aggregation.}
}
\value{
A list containing the results of the model selection:
  \item{`model`}{The final model object
  that corresponds to the optimal number of splines.}
  \item{`n_splines`}{An integer representing the optimal number of basis
  splines selected.}
}
\description{
This function performs the first stage regression (function-on-scalar) in pseudotime-dependent
Transcriptome-Wide Association Study (pt-TWAS). It fits the single cell gene expression, a function of pseudotime, using continuous
orthonormal splines, which are selected through a forward stepwise algorithm. A group lasso penalty term is imposed
onto the genotype coefficients to ensure SNP-wise sparsity.
}
\details{
The function first generates a set of orthonormal polynomial basis functions
on the interval [0, 1] using the Gram-Schmidt process. The order of the
polynomials is fixed at 4 (i.e., cubic polynomials).

It then employs a forward selection strategy. It starts by fitting a predictive
model (via the helper function `function_on_scalar`) with only the first
basis spline. It progressively adds one spline at a time, refitting the model
and evaluating its performance using cross-validated R-squared ($R^2_{CV}$).
The process stops when adding a new spline does not improve the mean $R^2_{CV}$
by at least a predefined threshold (0.01). The function returns the model
corresponding to the optimal number of splines selected.
}
\note{
The packages `gglasso`, `polynom` and `lme4` are dependencies for this function.
}
